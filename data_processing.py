# -*- coding: utf-8 -*-
"""Data_Processing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BA6xtfTFsln76kfgDAcgOiNUqQG_HanD

# Imports
"""

# from google.colab import drive
# drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/My Drive/CIS550 project/data'

import pandas as pd

parks = pd.read_csv('parks.csv')
species = pd.read_csv('species.csv')
trails = pd.read_csv('trails.csv')

"""# Clean parks.csv"""

parks.info()

parks.rename(columns={'Park Code': 'park_code', 'Park Name': 'park_name', 'State': 'state', 'Acres': 'acres', 'Latitude': 'latitude', 'Longitude': 'longitude'}, inplace=True)

parks.head()

parks['state'] = parks.apply(lambda x: x['state'][:2], axis=1)

parks.to_csv('parks_cleaned.csv')

"""# Clean species.csv"""

species.info()

species.drop(columns=['Unnamed: 13'], inplace=True) # remove unused columns

species.rename(columns={'Species ID': 'species_id', 'Park Name': 'park_name', 'Category': 'category', 'Order': 'order', 'Family': 'family', 
                        'Scientific Name': 'scientific_name', 'Common Names': 'common_names', 'Record Status': 'record_status', 'Occurrence': 'occurrence',
                        'Nativeness': 'nativeness', 'Abundance': 'abundance', 'Seasonality': 'seasonality', 
                        'Conservation Status': 'conservation_status'}, inplace=True)

species.head()

species['category'].unique()

species['conservation_status'].unique()

species['nativeness'].unique()

species.to_csv('species_cleaned.csv')

"""# Clean trails.csv

### Preprocess
"""

trails.info()

trails.rename(columns={'name': 'trail_name', 'area_name': 'park_name'}, inplace=True)

trails.head()

"""Remove country_name column"""

print(trails['country_name'].unique())
trails.drop(columns=['country_name'], inplace=True)

"""Convert _geoloc to two columns: latitude and longitude"""

trails['latitude'] = trails.apply(lambda x: x['_geoloc'].split(', ')[0][8:], axis=1)
trails['longitude'] = trails.apply(lambda x: x['_geoloc'].split(', ')[1][7:-1], axis=1)
trails.drop(columns=['_geoloc'], inplace=True)

"""Remove rows with inconsistent units"""

trails[['units']].describe()

trails = trails[trails['units'] == 'i']
trails.drop(columns=['units'], inplace=True)

trails.head()

"""Resolve inconsistent park name between park table and trail table"""

# Remove park names in Trails that are not in Parks table
names_to_remove = ['Clayton Co International Park, Jonesboro GA', 'Congaree National Park Wilderness', 'Fort Hunt National Park', 'Fort Pickens National Park',
                  'Indiana Dunes National Park', 'Kings Canyon National Park', 'Wolf Trap National Park for the Performing Arts']

trails['name_in'] = trails.apply(lambda x: x['park_name'] in names_to_remove, axis=1)

trails = trails[trails['name_in'] == False]
trails.drop(columns=['name_in'], inplace=True)

trails.shape

# Find mapping for park names between two tables
name_mapping = {'Denali National Park': 'Denali National Park and Preserve', 'Gateway Arch National Park': 'Gates Of The Arctic National Park and Preserve',
                'Glacier Bay National Park': 'Glacier Bay National Park and Preserve', 'Katmai National Park': 'Katmai National Park and Preserve',
                'Sequoia National Park': 'Sequoia and Kings Canyon National Parks'}

trails['park_name'] = trails.apply(lambda x: name_mapping[x['park_name']] if x['park_name'] in name_mapping else x['park_name'], axis=1)

trails.head()

parks_unique = sorted(parks['park_name'].unique())
trails_unique = sorted(trails['park_name'].unique())

set(trails_unique) - set(parks_unique)

"""Resolve inconsistent state name by changing full names to abbreviations."""

trails['state_name'].unique()

state_name_mapping = {'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA', 'Colorado': 'CO',
       'Florida': 'FL', 'Kentucky': 'KY', 'Maine': 'ME', 'Michigan': 'MI', 'Minnesota': 'MN',
       'Missouri': 'MO', 'Montana': 'MT', 'Nevada': 'NV', 'New Mexico': 'NM', 'North Carolina': 'NC',
       'North Dakota': 'ND', 'Ohio': 'OH', 'Oregon': 'OR', 'South Carolina': 'SC', 'South Dakota': 'SD',
       'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Virginia': 'VA', 'Washington': 'WA', 'Wyoming': 'WY'}

trails['state_name'] = trails.apply(lambda x: state_name_mapping[x['state_name']], axis=1)

trails.head()

trails.shape

"""### Create features table"""

features_table = []

def features_to_array(trail_name, park_name, features_str):
    features_list = features_str.split(',')
    features_list = [[trail_name, park_name, x[2:-1]] for x in features_list]
    features_list[-1][2] = features_list[-1][2][:-1]

    features_table.extend(features_list)
    return

_ = trails.apply(lambda x: features_to_array(x['trail_name'], x['park_name'], x['features']), axis=1)
features_cleaned = pd.DataFrame(data=features_table)

features_cleaned.rename(columns={0: 'trail_name', 1: 'park_name', 2: 'feature_name'}, inplace=True)

features_cleaned

features_cleaned['feature_name'].unique()

features_cleaned.to_csv('features_cleaned.csv')

"""### Create activities table"""

activities_table = []

def activities_to_array(trail_name, park_name, activities_str):
    activities_list = activities_str.split(',')
    activities_list = [[trail_name, park_name, x[2:-1]] for x in activities_list]
    activities_list[-1][2] = activities_list[-1][2][:-1]

    activities_table.extend(activities_list)
    return

_ = trails.apply(lambda x: activities_to_array(x['trail_name'], x['park_name'], x['activities']), axis=1)
activities_cleaned = pd.DataFrame(data=activities_table)

activities_cleaned.rename(columns={0: 'trail_name', 1: 'park_name', 2: 'activity_name'}, inplace=True)

activities_cleaned

activities_cleaned['activity_name'].unique()

activities_cleaned.to_csv('activities_cleaned.csv')

trails_cleaned = trails.drop(columns=['features', 'activities'])

trails_cleaned.to_csv('trails_cleaned.csv')